% Run simulation
%
% Creates simulation data for comparison of mSMV to ground truth
% and other shadow reduction methods
%
% Alexandra G. Roberts
% MRI Lab
% Cornell University
% 03/31/2022

clear

% Load data
load xS;
R2s = load('R2s_xS_sim.mat').R2s_xS_sim; 
true_QSM = xS(:,:,:,6);
matrix_size = size(true_QSM);
hemo_radius = 10;
x = linspace(-matrix_size(1)/2,matrix_size(1)/2,matrix_size(1));
y = linspace(-matrix_size(2)/2,matrix_size(2)/2,matrix_size(2));
z = linspace(-matrix_size(3)/2,matrix_size(3)/2,matrix_size(3));
[X,Y,Z] = ndgrid(x,y,z);
a = 15; b_e = -77.5; % r = 4;
b_e = -60; % r = 10
b = -70; c = 0;
r = sqrt((X-a).^2+(Y-b_e).^2+(Z-c).^2);
shadow_source_mask = zeros(matrix_size);
shadow_source_mask(r <= hemo_radius) = 1;


true_QSM = true_QSM+shadow_source_mask;
R2s(r <= hemo_radius) = 150;
gray_mask = abs(true_QSM-0.05)<0.0001;
%%
% Add background field
background_field = 1;
x_bk_ppm = 9.4;
x_gt = true_QSM;
if background_field == 1
    x = x_gt + ~Mask.*x_bk_ppm;
    filename = 'data\simulation\RDF_sim_hemo_e.mat';
else
    x = x_gt;
    filename = 'data\simulation\RDF_sim_gt_hemo.mat';
end

% Simulation parameters
SNR = 500;
delta_TE = 2.6e-3;
B0_dir = [ 0 0 1];  
matrix_size = [size(true_QSM,1) size(true_QSM,2) size(true_QSM,3)];
voxel_size = [.9375 .9375 1.5];
CF = 127e6;
numecho = 11;
TE = [1:numecho]*delta_TE;

% Create field with additive complex Gaussian noise
D = dipole_kernel(matrix_size,voxel_size,B0_dir,'kspace');
B_total = fftn(x).*D;
b_total = ifftn(B_total);
f = b_total.*(CF*1e-6);
mag = (sum(abs(xS),4)/3)+1;
mag = mag/max(mag(:)).*Mask;
for j = 1:numecho
    iField(:,:,:,j) = (mag.*exp(-2*pi*1i*f*TE(j)).*exp(-TE(j).*R2s))+...
        ((1./SNR).*randn(matrix_size)+(1./SNR).*1i*randn(matrix_size));
end

% Generate the magnitude image 
iMag = squeeze(sqrt(sum(abs(iField).^2,4)));

% Normalize field
noise_level = 1/SNR;
iField = iField/noise_level;

% Estimate the frequency offset in each of the voxel using complex fitting 
[iFreq_raw,N_std] = Fit_ppm_complex(iField);

% CSF zero-reference
Mask_CSF = extract_CSF(R2s,Mask,voxel_size);

% Unwrap phase using ROMEO
iFreq = romeo(iFreq_raw, iMag, Mask);
%%
% Save local field generated by PDF
[RDF,shim] = PDF(iFreq,N_std,Mask,matrix_size,voxel_size,B0_dir,0,100);
save(filename,'RDF','iFreq','iFreq_raw','iMag','N_std','Mask',...
    'matrix_size','voxel_size', 'delta_TE', 'CF','B0_dir','Mask_CSF','gray_mask','true_QSM','R2s');
%%
msmv('RDF_sim_hemo','data/simulation/RDF_sim_hemo_msmv')
QSM_msmv =  MEDI_L1_filt_dipole('filename','RDF_sim_hemo_msmv.mat','lambda',100);
QSM_smv =  MEDI_L1('filename','RDF_sim_hemo.mat','lambda',100);
QSM_ctrl =  MEDI_L1_orig_dipole('filename','RDF_sim_hemo.mat','lambda',100);

[fr,g] = createFit(true_QSM,QSM_ctrl)
[fr,g] = createFit(true_QSM,QSM_smv)
[fr,g] = createFit(true_QSM,QSM_msmv)
%%
make_figures(true_QSM,Mask,voxel_size','figures/simulation',44,1,1,[256 256],'hemo_sim_gt')
cd ..
cd ..
make_figures(QSM_ctrl,Mask,voxel_size','figures/simulation',44,1,1,[256 256],'hemo_sim_ctrl')
cd ..
cd ..
make_figures(QSM_smv,MaskErode(Mask,matrix_size,voxel_size,5),voxel_size','figures/simulation',44,1,1,[256 256],'hemo_sim_smv')
cd ..
cd ..
make_figures(QSM_msmv,Mask,voxel_size','figures/simulation',44,1,1,[256 256],'hemo_sim_msmv')
