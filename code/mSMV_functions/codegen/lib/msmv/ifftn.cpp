//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// ifftn.cpp
//
// Code generation for function 'ifftn'
//

// Include files
#include "ifftn.h"
#include "FFTImplementationCallback.h"
#include "msmv_data.h"

// Function Definitions
namespace coder {
void ifftn(const creal32_T x[4849664], creal32_T y[4849664])
{
  static creal32_T a[4849664];
  static creal32_T b[4849664];
  static creal32_T b_b[4849664];
  static const float fv[129]{
      1.0F,           0.999698818F,  0.99879545F,    0.997290432F,
      0.99518472F,    0.992479563F,  0.989176512F,   0.985277653F,
      0.980785251F,   0.975702107F,  0.970031261F,   0.963776052F,
      0.956940353F,   0.949528158F,  0.941544056F,   0.932992816F,
      0.923879504F,   0.914209723F,  0.903989315F,   0.893224299F,
      0.881921232F,   0.870086968F,  0.857728601F,   0.84485358F,
      0.831469595F,   0.817584813F,  0.803207517F,   0.78834641F,
      0.773010433F,   0.757208824F,  0.740951121F,   0.724247098F,
      0.707106769F,   0.689540565F,  0.671559F,      0.653172851F,
      0.634393334F,   0.615231633F,  0.59569931F,    0.575808227F,
      0.555570245F,   0.534997642F,  0.514102757F,   0.492898226F,
      0.471396744F,   0.449611336F,  0.427555084F,   0.40524134F,
      0.382683456F,   0.359895051F,  0.336889863F,   0.313681751F,
      0.290284663F,   0.266712785F,  0.242980197F,   0.219101235F,
      0.195090324F,   0.170961902F,  0.146730468F,   0.122410677F,
      0.0980171412F,  0.0735645667F, 0.0490676761F,  0.024541229F,
      0.0F,           -0.024541229F, -0.0490676761F, -0.0735645667F,
      -0.0980171412F, -0.122410677F, -0.146730468F,  -0.170961902F,
      -0.195090324F,  -0.219101235F, -0.242980197F,  -0.266712785F,
      -0.290284663F,  -0.313681751F, -0.336889863F,  -0.359895051F,
      -0.382683456F,  -0.40524134F,  -0.427555084F,  -0.449611336F,
      -0.471396744F,  -0.492898226F, -0.514102757F,  -0.534997642F,
      -0.555570245F,  -0.575808227F, -0.59569931F,   -0.615231633F,
      -0.634393334F,  -0.653172851F, -0.671559F,     -0.689540565F,
      -0.707106769F,  -0.724247098F, -0.740951121F,  -0.757208824F,
      -0.773010433F,  -0.78834641F,  -0.803207517F,  -0.817584813F,
      -0.831469595F,  -0.84485358F,  -0.857728601F,  -0.870086968F,
      -0.881921232F,  -0.893224299F, -0.903989315F,  -0.914209723F,
      -0.923879504F,  -0.932992816F, -0.941544056F,  -0.949528158F,
      -0.956940353F,  -0.963776052F, -0.970031261F,  -0.975702107F,
      -0.980785251F,  -0.985277653F, -0.989176512F,  -0.992479563F,
      -0.99518472F,   -0.997290432F, -0.99879545F,   -0.999698818F,
      -1.0F};
  static const float fv1[129]{
      0.0F,          0.024541229F,  0.0490676761F, 0.0735645667F, 0.0980171412F,
      0.122410677F,  0.146730468F,  0.170961902F,  0.195090324F,  0.219101235F,
      0.242980197F,  0.266712785F,  0.290284663F,  0.313681751F,  0.336889863F,
      0.359895051F,  0.382683456F,  0.40524134F,   0.427555084F,  0.449611336F,
      0.471396744F,  0.492898226F,  0.514102757F,  0.534997642F,  0.555570245F,
      0.575808227F,  0.59569931F,   0.615231633F,  0.634393334F,  0.653172851F,
      0.671559F,     0.689540565F,  0.707106769F,  0.724247098F,  0.740951121F,
      0.757208824F,  0.773010433F,  0.78834641F,   0.803207517F,  0.817584813F,
      0.831469595F,  0.84485358F,   0.857728601F,  0.870086968F,  0.881921232F,
      0.893224299F,  0.903989315F,  0.914209723F,  0.923879504F,  0.932992816F,
      0.941544056F,  0.949528158F,  0.956940353F,  0.963776052F,  0.970031261F,
      0.975702107F,  0.980785251F,  0.985277653F,  0.989176512F,  0.992479563F,
      0.99518472F,   0.997290432F,  0.99879545F,   0.999698818F,  1.0F,
      0.999698818F,  0.99879545F,   0.997290432F,  0.99518472F,   0.992479563F,
      0.989176512F,  0.985277653F,  0.980785251F,  0.975702107F,  0.970031261F,
      0.963776052F,  0.956940353F,  0.949528158F,  0.941544056F,  0.932992816F,
      0.923879504F,  0.914209723F,  0.903989315F,  0.893224299F,  0.881921232F,
      0.870086968F,  0.857728601F,  0.84485358F,   0.831469595F,  0.817584813F,
      0.803207517F,  0.78834641F,   0.773010433F,  0.757208824F,  0.740951121F,
      0.724247098F,  0.707106769F,  0.689540565F,  0.671559F,     0.653172851F,
      0.634393334F,  0.615231633F,  0.59569931F,   0.575808227F,  0.555570245F,
      0.534997642F,  0.514102757F,  0.492898226F,  0.471396744F,  0.449611336F,
      0.427555084F,  0.40524134F,   0.382683456F,  0.359895051F,  0.336889863F,
      0.313681751F,  0.290284663F,  0.266712785F,  0.242980197F,  0.219101235F,
      0.195090324F,  0.170961902F,  0.146730468F,  0.122410677F,  0.0980171412F,
      0.0735645667F, 0.0490676761F, 0.024541229F,  0.0F};
  static const float fv2[129]{
      0.0F,           -0.024541229F,  -0.0490676761F, -0.0735645667F,
      -0.0980171412F, -0.122410677F,  -0.146730468F,  -0.170961902F,
      -0.195090324F,  -0.219101235F,  -0.242980197F,  -0.266712785F,
      -0.290284663F,  -0.313681751F,  -0.336889863F,  -0.359895051F,
      -0.382683456F,  -0.40524134F,   -0.427555084F,  -0.449611336F,
      -0.471396744F,  -0.492898226F,  -0.514102757F,  -0.534997642F,
      -0.555570245F,  -0.575808227F,  -0.59569931F,   -0.615231633F,
      -0.634393334F,  -0.653172851F,  -0.671559F,     -0.689540565F,
      -0.707106769F,  -0.724247098F,  -0.740951121F,  -0.757208824F,
      -0.773010433F,  -0.78834641F,   -0.803207517F,  -0.817584813F,
      -0.831469595F,  -0.84485358F,   -0.857728601F,  -0.870086968F,
      -0.881921232F,  -0.893224299F,  -0.903989315F,  -0.914209723F,
      -0.923879504F,  -0.932992816F,  -0.941544056F,  -0.949528158F,
      -0.956940353F,  -0.963776052F,  -0.970031261F,  -0.975702107F,
      -0.980785251F,  -0.985277653F,  -0.989176512F,  -0.992479563F,
      -0.99518472F,   -0.997290432F,  -0.99879545F,   -0.999698818F,
      -1.0F,          -0.999698818F,  -0.99879545F,   -0.997290432F,
      -0.99518472F,   -0.992479563F,  -0.989176512F,  -0.985277653F,
      -0.980785251F,  -0.975702107F,  -0.970031261F,  -0.963776052F,
      -0.956940353F,  -0.949528158F,  -0.941544056F,  -0.932992816F,
      -0.923879504F,  -0.914209723F,  -0.903989315F,  -0.893224299F,
      -0.881921232F,  -0.870086968F,  -0.857728601F,  -0.84485358F,
      -0.831469595F,  -0.817584813F,  -0.803207517F,  -0.78834641F,
      -0.773010433F,  -0.757208824F,  -0.740951121F,  -0.724247098F,
      -0.707106769F,  -0.689540565F,  -0.671559F,     -0.653172851F,
      -0.634393334F,  -0.615231633F,  -0.59569931F,   -0.575808227F,
      -0.555570245F,  -0.534997642F,  -0.514102757F,  -0.492898226F,
      -0.471396744F,  -0.449611336F,  -0.427555084F,  -0.40524134F,
      -0.382683456F,  -0.359895051F,  -0.336889863F,  -0.313681751F,
      -0.290284663F,  -0.266712785F,  -0.242980197F,  -0.219101235F,
      -0.195090324F,  -0.170961902F,  -0.146730468F,  -0.122410677F,
      -0.0980171412F, -0.0735645667F, -0.0490676761F, -0.024541229F,
      -0.0F};
  int b_k;
  int b_tmp;
  int c_k;
  int k;
  internal::FFTImplementationCallback::r2br_r2dit_trig(x, fv, fv1, a);
  for (k = 0; k < 74; k++) {
    b_tmp = k << 16;
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        b[(b_k + (c_k << 8)) + b_tmp] = a[(c_k + (b_k << 8)) + b_tmp];
      }
    }
  }
  internal::FFTImplementationCallback::r2br_r2dit_trig(b, fv, fv1, b_b);
  for (k = 0; k < 74; k++) {
    b_tmp = k << 16;
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        a[(b_k + (c_k << 8)) + b_tmp] = b_b[(c_k + (b_k << 8)) + b_tmp];
      }
    }
  }
  for (k = 0; k < 74; k++) {
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        b[(k + 74 * c_k) + 18944 * b_k] = a[(c_k + (b_k << 8)) + (k << 16)];
      }
    }
  }
  internal::FFTImplementationCallback::dobluesteinfft(b, fv, fv2, fv1, b_b);
  for (k = 0; k < 256; k++) {
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 74; c_k++) {
        y[(b_k + (k << 8)) + (c_k << 16)] = b_b[(c_k + 74 * b_k) + 18944 * k];
      }
    }
  }
}

void ifftn(const creal_T x[4849664], creal_T y[4849664])
{
  static creal_T a[4849664];
  static creal_T b[4849664];
  static creal_T b_b[4849664];
  int b_k;
  int b_tmp;
  int c_k;
  int k;
  internal::FFTImplementationCallback::d_r2br_r2dit_trig(x, dv, dv2, a);
  for (k = 0; k < 74; k++) {
    b_tmp = k << 16;
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        b[(b_k + (c_k << 8)) + b_tmp] = a[(c_k + (b_k << 8)) + b_tmp];
      }
    }
  }
  internal::FFTImplementationCallback::d_r2br_r2dit_trig(b, dv, dv2, b_b);
  for (k = 0; k < 74; k++) {
    b_tmp = k << 16;
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        a[(b_k + (c_k << 8)) + b_tmp] = b_b[(c_k + (b_k << 8)) + b_tmp];
      }
    }
  }
  for (k = 0; k < 74; k++) {
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 256; c_k++) {
        b[(k + 74 * c_k) + 18944 * b_k] = a[(c_k + (b_k << 8)) + (k << 16)];
      }
    }
  }
  internal::FFTImplementationCallback::b_dobluesteinfft(b, dv, dv1, dv2, b_b);
  for (k = 0; k < 256; k++) {
    for (b_k = 0; b_k < 256; b_k++) {
      for (c_k = 0; c_k < 74; c_k++) {
        y[(b_k + (k << 8)) + (c_k << 16)] = b_b[(c_k + 74 * b_k) + 18944 * k];
      }
    }
  }
}

} // namespace coder

// End of code generation (ifftn.cpp)
